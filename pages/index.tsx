import { BigNumber } from '@ethersproject/bignumber'
import { Contract } from '@ethersproject/contracts'
import { formatEther, formatUnits, parseUnits } from '@ethersproject/units'
import { useWeb3React } from '@web3-react/core'
import type { NextPage } from 'next'
import Head from 'next/head'
import { useCallback, useEffect, useMemo, useState } from 'react'
import { injected } from '../connectors'
import MY_TOKEN_ABIS from '../contracts/abis/mytoken.json'

const Home: NextPage = () => {
  const [balance, setBalance] = useState<BigNumber>(BigNumber.from(0))

  const { chainId, activate, deactivate, account, library } = useWeb3React();

  // const myTokenContract = new Contract(
  //   "0xe3B9504A6784Fbd28629adF1d3B14f833157615B",
  //   MY_TOKEN_ABIS,
  //   library
  // )

  const myTokenContract = useMemo(() => {
    return new Contract(
      "0xe3B9504A6784Fbd28629adF1d3B14f833157615B",
    MY_TOKEN_ABIS,
    account ? library.getSigner() : null
    )
  }, [library, account])

  const getBalance = useCallback(async () => {
    return await myTokenContract.balanceOf(account);
  }, [myTokenContract, account])


  const transferToken = useCallback(async (recipient: string, amount: number) => {
    return await myTokenContract.transfer(recipient, parseUnits(amount.toString(), 18))
  }, [myTokenContract, account])

  useEffect(() => {
    if(account){
      // (async () => {
      //   setBalance(await getBalance())
      // }) ();
      getBalance().then((balanceResult) => {
        setBalance(balanceResult)
      })
    }
  }, [myTokenContract, account, getBalance])

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <p>
          <label>Chain Id: {chainId ? chainId : "Connect wallet first"}</label>
        </p>
        <p>
          <label>Wallet address: {account ? account : "Connect wallet first"}</label>
        </p>
        <p>
          <label>Balance: {formatUnits(balance)}</label>
        </p>
        <button
          onClick={() => {
            activate(injected)
          }}
        >
          Connect
        </button>
        <button
          onClick={() => {
            deactivate()
          }}
        >
          Disconnect
        </button>
        <button
          onClick={() => {
            transferToken("0xEd1fE49a492E5016eA32afb253Addc7f75836bb3", 5).then(
              () => {
                if(account){
                  getBalance().then((balanceResult) => {
                    setBalance(balanceResult)
                  })
                }
              }
            )
          }}
        >
          Transfer
        </button>
      </main>
    </div>
  )
}

export default Home
